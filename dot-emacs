;;; -*- mode: emacs-lisp -*-
;;; dot-emacs.el -- Emacs
;;;
;;; Commentary:
;;;
;;; Code:


;;
;; Personal Information
;;

(setq user-full-name "Kukjin Kang")
(setq user-mail-address "kj.kang@daum.net")


;;
;; Set language environment to korean (UTF-8)
;;

(set-language-environment "Korean")
(setq locale-coding-system 'utf-8)
(set-locale-environment "ko_KR.utf-8")
(prefer-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)


;;
;; set buffer, file environment
;;

(setq inhibit-startup-message nil)
(setq delete-by-moving-to-trash t)
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq create-lockfiles nil)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default c-basic-offset 2)

(defalias 'yes-or-no-p 'y-or-n-p)

(global-auto-revert-mode t)
(recentf-mode t)


;;
;; Move customization to their own file
;;

(setq custom-file (concat (file-name-as-directory user-emacs-directory) "custom.el"))

;;
;; Set OS envrionment
;;

(defvar os-linux-p (eq system-type 'gnu/linux))
(defvar os-windows-p (eq system-type 'windows-nt))
(defvar os-macos-p (eq system-type 'darwin))


;;
;; For linux environment
;;

(when os-linux-p
 (setq x-alt-keysym 'meta))

;;
;;
;;

(setq warning-minimum-level :emergency)


;;
;; Save buffers before shutting down and restore them on startup
;;


(require 'desktop)
(desktop-save-mode t)
(add-to-list 'desktop-modes-not-to-save 'fundamental-mode)
(add-to-list 'desktop-modes-not-to-save 'dired-mode)
(add-to-list 'desktop-modes-not-to-save 'helm-mode)


;;=====================================
;;Pakcage Manager
;;=====================================


;;
;; Package repositories
;;

(require 'package)
(setq package-enable-at-startup nil)
(setq package-user-dir "~/.emacs.d/elpa")
(setq load-prefer-newer t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))


;;
;; Set load-path for elpa
;;

(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
(add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))


;;
;; use-package
;;

(require 'package)
(package-initialize)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-always-ensure t)
(setq use-package-verbose nil)
(setq use-package-always-defer t)
(setq use-package-enable-imenu-support t)


;;
;; Automatically update Emacs package
;; https://github.com/rranelli/auto-package-update.el
;;

(use-package auto-package-update
  :pin melpa
  :init
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe))


;;
;; A modern Packages Menu. Colored, with package ratings, and customizable.
;; https://github.com/Malabarba/paradox
;;

(use-package paradox
  :pin melpa
  :config
  (paradox-enable))


;;=====================================
;; Theme
;;=====================================


;;
;; 윈도우 기본 환경 설정
;;

(global-font-lock-mode t)
(transient-mark-mode t)
(global-hl-line-mode t)

(when window-system
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))


;;
;; 한글, 영문 글꼴 설정
;;
;; ABCDABCD
;; 한글ABCD
;;

(when window-system
  (when os-linux-p
    (set-fontset-font t 'hangul (font-spec :family "NanumGothicCoding"))
    (set-face-attribute 'default nil :family "SF Mono" :height 180))
  (when os-windows-p
    (setq face-font-rescale-alist `(("NanumGothicCoding" . 1.20)))
    (set-fontset-font t 'hangul (font-spec :family "NanumGothicCoding"))
    (set-face-attribute 'default nil :family "SF Mono" :height 110)))


;;
;; doom-themes
;;

(use-package doom-themes
  :pin melpa
  :config
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t)
  (doom-themes-visual-bell-config)
  (doom-themes-neotree-config)
  (setq doom-themes-treemacs-theme "doom-atom")
  (doom-themes-treemacs-config)
  (doom-themes-org-config)
  (load-theme 'doom-one t)
  (load-theme 'doom-one-light t)
  (run-at-time "09:00" (* 60 60 24) (lambda () (enable-theme 'doom-one-light)))
  (run-at-time "20:00" (* 60 60 24) (lambda () (enable-theme 'doom-one))))


;;
;; spaceline
;; https://github.com/TheBB/spaceline
;;

(use-package spaceline
  :ensure t
  :pin melpa
  :init
  (require 'spaceline-config)
  (spaceline-toggle-minor-modes-off)
  (spaceline-toggle-buffer-encoding-off)
  ;; (spaceline-toggle-buffer-encoding-abbrev-off)
  (setq powerline-default-separator 'arrow)
  (spaceline-spacemacs-theme)
  (spaceline-helm-mode))


;;=====================================
;; Editing
;;=====================================


(use-package etag
  :ensure nil
  :elpaca nil
  :bind
  ("M-*" . pop-tag-mark))


;;
;; Modular text completion framework
;;

(use-package company
  :pin melpa
  :diminish
  :bind
  ("M-/" . company-complete)
  (:map company-active-map
    ("C-n" . company-select-next)
    ("C-p" . company-select-previous)
    ("<tab>" . company-complete-common-or-cycle))
  (:map company-search-map
    ("C-n" . company-select-next)
    ("C-p" . company-select-previous))
  :init
  (setq company-idle-delay 0)
  (setq company-echo-delay (if (display-graphic-p) nil 0))
  (setq company-minimum-prefix-length 1)
  (setq company-icon-margin 3)
  (setq company-tooltip-align-annotations t)
  (setq company-tooltip-limit 12)
  (setq company-require-match nil))

;;
;;
;;

(use-package emmet-mode
  :ensure t
  :pin melpa
  :hook
  (sgml-mode . emmet-mode)
  (css-mode . emmet-mode))


;;
;;
;;

(use-package move-text
  :ensure t
  :pin melpa
  :bind
  ("M-<up>" . move-text-up)
  ("M-<down>" . move-text-down))


;;
;;
;;

(use-package smartparens
  :ensure t
  :pin melpa
  :diminish yas-minor-mode
  :config
  (require 'smartparens-config))

;;
;; Yet another snippet extension for Emacs
;;
;; M-x yas-new-snippet (C-c & C-n)

(use-package yasnippet
  :ensure t
  :pin melpa
  :hook
  (prog-mode . yas-minor-mode))

;;
;;
;;

(use-package wgrep
  :pin melpa)

;;
;; Collection of yasnippet snippets
;;
;; M-x yas-describe-tables
;;

(use-package yasnippet-snippets
  :ensure t
  :pin melpa
  :bind
  ("C-c y" . yas-describe-tables)
  :after yasnippet)


;;
;; Highlight brackets according to their depth
;;

;; (use-package rainbow-delimiters
;;   :pin melpa
;;   :hook
;;   (prog-mode . rainbow-delimiters)
;;   :config
;;      (custom-set-faces
;;     '(rainbow-delimiters-depth-0-face ((t (:foreground "saddle brown"))))
;;     '(rainbow-delimiters-depth-1-face ((t (:foreground "dark orange"))))
;;     '(rainbow-delimiters-depth-2-face ((t (:foreground "deep pink"))))
;;     '(rainbow-delimiters-depth-3-face ((t (:foreground "chartreuse"))))
;;     '(rainbow-delimiters-depth-4-face ((t (:foreground "deep sky blue"))))
;;     '(rainbow-delimiters-depth-5-face ((t (:foreground "yellow"))))
;;     '(rainbow-delimiters-depth-6-face ((t (:foreground "orchid"))))
;;     '(rainbow-delimiters-depth-7-face ((t (:foreground "spring green"))))
;;     '(rainbow-delimiters-depth-8-face ((t (:foreground "sienna1"))))
;;     '(rainbow-delimiters-unmatched-face ((t (:foreground "black"))))))


;;=====================================
;;
;;=====================================


;;
;;
;;

(use-package helm
  :ensure t
  :pin melpa
  :bind
  ("C-x C-f" . 'helm-find-files)
  ("C-x b"   . 'helm-mini)
  ("M-x"     . 'helm-M-x)
  :config
  (setq helm-split-window-inside-p t)
  (setq helm-move-to-line-cycle-in-source t)
  (setq helm-scroll-amount 8))


;;
;;
;;

(use-package projectile
  :defer 1
  :pin melpa
  :commands
  (projectile-find-file projectile-switch-project)
  :bind
  ("C-c p" . projectile-command-map)
  :config
  (projectile-mode))


;;
;;
;;

(use-package helm-projectile
  :pin melpa
  :config
  (helm-projectile-on))

;; https://github.com/kj-kang/dot-emacs/issues/5
(helm-projectile-on)


;;=====================================
;; Git
;;=====================================

;;
;;
;;

(use-package magit
  :ensure t
  :pin melpa)


;;
;;
;;

(use-package magit-gitflow
  :ensure t
  :pin melpa
  :hook
  (magit-mode . turn-on-magit-gitflow))


;;=====================================
;; Programming
;;=====================================


;;
;;
;;

(use-package flycheck
  :pin melpa)


;;
;;
;;

(use-package flycheck-inline
  :pin melpa
  :hook
  (flycheck . flycheck-inline-mode))


;;
;;
;;

(use-package lsp-mode
  :ensure t
  :pin melpa
  :commands (lsp lsp-deferred)
  :config
  (setq lsp-response-timeout 25)
  (setq lsp-completion-provider :capf)
  (setq lsp-idle-delay 0.500))


;;
;;
;;

(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-position 'at-point)
  (setq lsp-ui-doc-alignment 'window)
  (setq lsp-ui-sideline-show-code-actions t))


;;
;;
;;

(use-package emacs-lisp-mode
  :ensure nil
  :bind
  (:map emacs-lisp-mode-map
    ("C-c C-b" . eval-buffer)
    ("C-c C-f" . eval-defun)
    ("M-*"     . pop-tag-mark))
  :hook
  (emacs-lisp-mode . company-mode)
  (emacs-lisp-mode . (lambda () (set (make-local-variable 'company-backends)
                     '((company-capf
                        company-semantic
                        company-files
                        company-elisp
                        company-yasnippet)))))
  (emacs-lisp-mode . display-line-numbers-mode)
  (emcas-lisp-mode . flycheck-mode)
  (emacs-lisp-mode . (lambda () (setq-local flycheck-disabled-checkers '(emcas-lisp-checkdoc))))
  (emacs-lisp-mode . electric-pair-mode)
  (emacs-lisp-mode . show-paren-mode)
  (emcas-lisp-mode . smartparens-mode)
  (emacs-lisp-mode . (lambda () (add-hook 'before-save-hook 'whitespace-cleanup))))


;;
;;
;;

(use-package js2-mode
  :ensure t
  :pin melpa
  :hook
  (js2-mode . setup-tide-mode)
  :config
  (setq js-indent-level 2)
  (setq js2-basic-offset 2))

;;
;;
;;

(use-package json-mode
  :ensure t
  :pin melpa
  :hook
  (json-mode . display-line-numbers-mode)
  (json-mode . flycheck-mode)
  (json-mode . (lambda ()
                 (make-local-variable 'js-indent-level)
                 (setq tab-width 2)
                 (setq js-indent-level 2)))
  :config
  (flycheck-add-mode 'json-jsonlint 'json-mode))


;;
;;
;;

(use-package web-mode
  :ensure t
  :pin melpa
  :mode ("\\.tsx\\'" "\\.js\\'" "\\.html\\'")
  :hook
  (web-mode . company-mode)
  (web-mode . display-line-numbers-mode)
  (web-mode . eldoc-mode)
  (web-mode . flycheck-mode)
  (web-mode . show-paren-mode)
  (web-mode . smartparens-mode)
  (web-mode . (lambda ()
        (when (string-equal "tsx" (file-name-extension buffer-file-name))
          (setq web-mode-code-indent-offset 2)
          (setup-tide-mode))
        (when (string-equal "jsx" (file-name-extension buffer-file-name))
          (setq web-mode-code-indent-offset 2)
          (setup-tide-mode))
        (when (string-equal "js" (file-name-extension buffer-file-name))
          (setq web-mode-code-indent-offset 2)
          (setup-tide-mode))))
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-block-padding 2)
  (setq web-mode-comment-style 2)
  (setq web-mode-enable-css-colorization t)
  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-auto-closing t))

;;
;;
;;

(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (when(file-exists-p (concat tide-project-root "node_modules/typescript/bin/tsserver"))
    (setq tide-tsserver-executable "node_modules/typescript/bin/tsserver"))
  (tide-hl-identifier-mode)
  (setq tide-format-options
    '(:indentSize 2 :tabSize 2)))

(use-package tide
  :ensure t
  :pin melpa
  :bind
  (:map tide-mode-map
    ("C-c d" . tide-documentation-at-point)))

(use-package typescript-mode
  :ensure t
  :pin melpa
  :mode ("\\.ts\\'")
  :hook
  (typescript-mode . setup-tide-mode)
  (typescript-mode . company-mode)
  (typescript-mode . display-line-numbers-mode)
  (typescript-mode . eldoc-mode)
  (typescript-mode . flycheck-mode)
  (typescript-mode . electric-pair-mode)
  (typescript-mode . show-paren-mode)
  (typescript-mode . smartparens-mode)
  :config
  (setq typescript-indent-level 2))


;;=====================================
;; org
;;=====================================

(use-package org
  :ensure t
  :pin melpa
  :bind
  ("C-c a" . org-agenda)
  ("C-c c" . org-capture)
  ("C-c l" . org-stored-links)
  :config
  (require 'default-org))


;;; dot-emacs ends here
